apply plugin: "cpp"

def allegroHeadersAbsPath = projectDir.toString() + "/" + getProperty("allegro.headers_from_project")
def allegroLibAbsPath = projectDir.toString() + "/" + getProperty("allegro.liballegro_from_project")
def allegroMainLibAbsPath = projectDir.toString() + "/" + getProperty("allegro.liballegro_main_from_project")

model {
    buildTypes {
        debug
        release
    }
    components {
        main(NativeExecutableSpec) {
            sources {
                cpp.lib library: "recurvis"
                cpp.lib library: "allegro_wrapper"
                cpp.lib library: "allegro"
                cpp.lib library: "allegro_main"
            }
        }
        recurvis(NativeLibrarySpec) {
            sources {
                cpp.lib library: "allegro_wrapper"
            }
        }
        allegro_wrapper(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "allegro"
                }
            }
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            allegro {
                headers.srcDir allegroHeadersAbsPath
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(allegroLibAbsPath)
                }
            }
            allegro_main {
                headers.srcDir allegroHeadersAbsPath
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(allegroMainLibAbsPath)
                }
            }
        }
    }
    binaries {
        all {
            cppCompiler.args "-std=c++14", "-Wall", "-Wextra"
            if (toolChain in GccCompatibleToolChain) {
                if (buildType == buildTypes.debug) {
                //    cppCompiler.args "-g3", "-O0"
                    cppCompiler.define "DEBUG"
                }
                else if (buildType == buildTypes.release) {
                    cppCompiler.args "-O2"
                    cppCompiler.define "NDEBUG"
                }
            }
        }
    }
}
